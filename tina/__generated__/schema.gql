# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  homepage(relativePath: String): Homepage!
  homepageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HomepageFilter): HomepageConnection!
  article(relativePath: String): Article!
  articleConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ArticleFilter): ArticleConnection!
  project(relativePath: String): Project!
  projectConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProjectFilter): ProjectConnection!
  resource(relativePath: String): Resource!
  resourceConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ResourceFilter): ResourceConnection!
}

input DocumentFilter {
  homepage: HomepageFilter
  article: ArticleFilter
  project: ProjectFilter
  resource: ResourceFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Homepage | Article | Project | Resource | Folder

type HomepageIdeasExploring {
  title: String!
  description: String
}

type HomepageExperienceHighlights {
  company: String!
  role: String!
  period: String
  description: String
  achievement: String
}

type HomepageSocialLinks {
  linkedin: String
  github: String
  twitter: String
}

type Homepage implements Node & Document {
  title: String!
  heroTitle: String!
  heroSubtitle: String!
  heroDescription: String!
  profileImage: String
  ideasExploring: [HomepageIdeasExploring]
  experienceHighlights: [HomepageExperienceHighlights]
  socialLinks: HomepageSocialLinks
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input HomepageIdeasExploringFilter {
  title: StringFilter
  description: StringFilter
}

input HomepageExperienceHighlightsFilter {
  company: StringFilter
  role: StringFilter
  period: StringFilter
  description: StringFilter
  achievement: StringFilter
}

input HomepageSocialLinksFilter {
  linkedin: StringFilter
  github: StringFilter
  twitter: StringFilter
}

input HomepageFilter {
  title: StringFilter
  heroTitle: StringFilter
  heroSubtitle: StringFilter
  heroDescription: StringFilter
  profileImage: ImageFilter
  ideasExploring: HomepageIdeasExploringFilter
  experienceHighlights: HomepageExperienceHighlightsFilter
  socialLinks: HomepageSocialLinksFilter
}

type HomepageConnectionEdges {
  cursor: String!
  node: Homepage
}

type HomepageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HomepageConnectionEdges]
}

type Article implements Node & Document {
  title: String!
  date: String!
  category: String
  tags: [String]
  published: Boolean
  excerpt: String
  featuredImage: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ArticleFilter {
  title: StringFilter
  date: DatetimeFilter
  category: StringFilter
  tags: StringFilter
  published: BooleanFilter
  excerpt: StringFilter
  featuredImage: StringFilter
  body: RichTextFilter
}

type ArticleConnectionEdges {
  cursor: String!
  node: Article
}

type ArticleConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ArticleConnectionEdges]
}

type ProjectImpact {
  revenue: String
  users: String
  efficiency: String
}

type Project implements Node & Document {
  title: String!
  date: String!
  company: String
  role: String
  duration: String
  category: String
  tags: [String]
  featured: Boolean
  published: Boolean
  excerpt: String
  image: String
  impact: ProjectImpact
  technologies: [String]
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ProjectImpactFilter {
  revenue: StringFilter
  users: StringFilter
  efficiency: StringFilter
}

input ProjectFilter {
  title: StringFilter
  date: DatetimeFilter
  company: StringFilter
  role: StringFilter
  duration: StringFilter
  category: StringFilter
  tags: StringFilter
  featured: BooleanFilter
  published: BooleanFilter
  excerpt: StringFilter
  image: StringFilter
  impact: ProjectImpactFilter
  technologies: StringFilter
  body: RichTextFilter
}

type ProjectConnectionEdges {
  cursor: String!
  node: Project
}

type ProjectConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProjectConnectionEdges]
}

type Resource implements Node & Document {
  title: String!
  date: String!
  category: String
  published: Boolean
  excerpt: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ResourceFilter {
  title: StringFilter
  date: DatetimeFilter
  category: StringFilter
  published: BooleanFilter
  excerpt: StringFilter
  body: RichTextFilter
}

type ResourceConnectionEdges {
  cursor: String!
  node: Resource
}

type ResourceConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ResourceConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateHomepage(relativePath: String!, params: HomepageMutation!): Homepage!
  createHomepage(relativePath: String!, params: HomepageMutation!): Homepage!
  updateArticle(relativePath: String!, params: ArticleMutation!): Article!
  createArticle(relativePath: String!, params: ArticleMutation!): Article!
  updateProject(relativePath: String!, params: ProjectMutation!): Project!
  createProject(relativePath: String!, params: ProjectMutation!): Project!
  updateResource(relativePath: String!, params: ResourceMutation!): Resource!
  createResource(relativePath: String!, params: ResourceMutation!): Resource!
}

input DocumentUpdateMutation {
  homepage: HomepageMutation
  article: ArticleMutation
  project: ProjectMutation
  resource: ResourceMutation
  relativePath: String
}

input DocumentMutation {
  homepage: HomepageMutation
  article: ArticleMutation
  project: ProjectMutation
  resource: ResourceMutation
}

input HomepageIdeasExploringMutation {
  title: String
  description: String
}

input HomepageExperienceHighlightsMutation {
  company: String
  role: String
  period: String
  description: String
  achievement: String
}

input HomepageSocialLinksMutation {
  linkedin: String
  github: String
  twitter: String
}

input HomepageMutation {
  title: String
  heroTitle: String
  heroSubtitle: String
  heroDescription: String
  profileImage: String
  ideasExploring: [HomepageIdeasExploringMutation]
  experienceHighlights: [HomepageExperienceHighlightsMutation]
  socialLinks: HomepageSocialLinksMutation
}

input ArticleMutation {
  title: String
  date: String
  category: String
  tags: [String]
  published: Boolean
  excerpt: String
  featuredImage: String
  body: JSON
}

input ProjectImpactMutation {
  revenue: String
  users: String
  efficiency: String
}

input ProjectMutation {
  title: String
  date: String
  company: String
  role: String
  duration: String
  category: String
  tags: [String]
  featured: Boolean
  published: Boolean
  excerpt: String
  image: String
  impact: ProjectImpactMutation
  technologies: [String]
  body: JSON
}

input ResourceMutation {
  title: String
  date: String
  category: String
  published: Boolean
  excerpt: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
